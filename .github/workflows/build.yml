name: Build

on:
  workflow_call:
    inputs:
      repository:
        type: string
        required: false
        default: "glotzerlab"
      image:
        type: string
        required: true
      build_runner:
        type: string
        required: false
        default: ubuntu-latest
      test_runner:
        type: string
        required: false
        default: ubuntu-latest
      docker_options:
        type: string
        required: false
      render_gallery:
        type: boolean
        required: false
        default: false

    secrets:
      DOCKER_HUB_USERNAME:
        required: false
      DOCKER_HUB_ACCESS_TOKEN:
        required: false

# Use multiple jobs to reduce the amount of time spent on GPU runners. Use GitHub Hosted runners
# for compiling all tests configurations (GPU and CPU), then upload the installation directory
# as an artifact. Test jobs depend on the build job, download the install directory, and run the
# tests. Upload each build configuration to a separate artifact.

jobs:
  build:
    runs-on: ${{ inputs.build_runner }}
    container:
      image: ${{ inputs.repository }}/ci:2022.01-${{ inputs.image }}
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    steps:
    - uses: actions/checkout@v2.4.0
      with:
        path: code
        submodules: true
    - name: Configure
      run: |
        mkdir -p build
        cd build
        cmake ../code -GNinja \
                      -DENABLE_EMBREE=${ENABLE_EMBREE:-"ON"} \
                      -DENABLE_OPTIX=${ENABLE_OPTIX:-"OFF"} \
                      -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install
      env:
        ENABLE_OPTIX: ${{ contains(inputs.image, 'optix') }}
        ENABLE_EMBREE: ${{ !contains(inputs.image, 'optix') }}
    - name: Build
      run: ninja install
      working-directory: build
   # Tar the installation directory to preserve permissions and reduce HTTP requests on upload.
    - name: 'Tar install'
      run: tar --use-compress-program='zstd -10 -T0' -cvf install.tar install
    # Upload the tarball. Retain the file for a limited time in case developers need to download
    # and run tests locally for further debugging.
    - uses: actions/upload-artifact@v2.2.4
      name: 'Upload install'
      with:
        name: install-${{ inputs.image }}-${{ github.sha }}
        path: install.tar
        retention-days: 7

  test:
    needs: build
    runs-on: ${{ inputs.test_runner }}
    container:
      image: ${{ inputs.repository }}/ci:2022.01-${{ inputs.image }}
      options: ${{ inputs.docker_options }} -e CUDA_VISIBLE_DEVICES
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    steps:
    - name: Clean workspace
      run: rm -rf ./*

    - uses: actions/download-artifact@v2.0.10
      with:
        name: install-${{ inputs.image }}-${{ github.sha }}
    - name: Untar install
      run: tar --use-compress-program='zstd -10 -T0' -xvf install.tar

    - name: Run tests
      run: python3 -m pytest --pyargs fresnel -v --log-level=DEBUG --durations=0 --durations-min=0.1
      env:
        PYTHONPATH: ${{ github.workspace }}/install

    - name: Render gallery images
      if: ${{ inputs.render_gallery }}
      run: for i in *.py; do echo "Rendering $i" && python3 $i || exit 1; done
      working-directory: code/doc/gallery
      env:
        PYTHONPATH: ${{ github.workspace }}/install
