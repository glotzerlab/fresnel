<% extends "workflow.yml" %>
<% block name %>
# Edit `unit_test.yml` in `.github/workflows/templates` and run `make_workflows.py` to update the
# workflow.
name: Unit test
<% endblock %>
<% macro job(name, use_gpu_runners, configurations, needs='') %>
    name: << name >> [${{ join(matrix.config, '_') }}]
    <% if needs != '' %>
    needs: << needs >>
    <% endif %>
    <% if use_gpu_runners %>
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.repository }}/<< container_prefix >>-${{ matrix.config[0] }}
      options: ${{ matrix.docker_options }} -e CUDA_VISIBLE_DEVICES
    <% else %>
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.repository }}/<< container_prefix >>-${{ matrix.config[0] }}
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    <% endif %>
    strategy:
      matrix:
        include:
    <% for configuration in configurations %>
        - {repository: << configuration.repository >>, config: << configuration.config >>, runner: << configuration.runner >>, docker_options: '<< configuration.docker_options >>' }
    <% endfor %>

    steps:
    <% if use_gpu_runners %>
    - name: Clean workspace
      run: rm -rf ./*
    <% endif %>
<% endmacro %>
<% set upload_install_steps %>
    # Tar the installation directory to preserve permissions and reduce HTTP requests on upload.
    - name: 'Tar install'
      run: tar --use-compress-program='zstd -10 -T0' -cvf install.tar install
    # Upload the tarball. Retain the file for a limited time in case developers need to download
    # and run tests locally for further debugging.
    - uses: actions/upload-artifact@v2.2.3
      name: 'Upload install'
      with:
        name: install-${{ join(matrix.config, '_') }}-${{ github.sha }}
        path: install.tar
        retention-days: 7
<% endset %>
<% set download_install_steps %>
    - uses: actions/download-artifact@v2.0.9
      with:
        name: install-${{ join(matrix.config, '_') }}-${{ github.sha }}
    - name: Untar install
      run: tar --use-compress-program='zstd -10 -T0' -xvf install.tar
<% endset %>
<% block jobs %>
# Use multiple jobs to reduce the amount of time spent on GPU runners. Use GitHub Hosted runners
# for compiling all tests configurations (GPU and CPU), then upload the installation directory
# as an artifact. Test jobs depend on the build job, download the install directory, and run the
# tests. Upload each build configuration to a separate artifact.
jobs:
  build:
<< job(name='Build', use_gpu_runners=False, configurations=test_configurations) >>
    - uses: actions/checkout@v2.3.4
      with:
        path: code
        submodules: true
    - name: Configure
      run: |
        mkdir -p build
        cd build
        cmake ../code -GNinja \
                      -DENABLE_EMBREE=${ENABLE_EMBREE:-"ON"} \
                      -DENABLE_OPTIX=${ENABLE_OPTIX:-"OFF"} \
                      -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install
      env:
        ENABLE_OPTIX: ${{ contains(matrix.config[0], 'optix') }}
        ENABLE_EMBREE: ${{ contains(matrix.config, 'embree') }}
    - name: Build
      run: ninja install
      working-directory: build
<< upload_install_steps >>

  test:
<< job(name='Test', use_gpu_runners=True, needs='build', configurations=test_configurations) >>
<< download_install_steps >>
    - name: Run tests
      run: python3 -m pytest --pyargs fresnel -v --log-level=DEBUG --durations=0 --durations-min=0.1
      env:
        PYTHONPATH: ${{ github.workspace }}/install

  render_gallery:
<< job(name='Render gallery', use_gpu_runners=True, needs='build', configurations=gallery_configurations) >>
    - uses: actions/checkout@v2.3.4
      with:
        submodules: true
        path: code
<< download_install_steps >>
    - name: Render gallery images
      run: for i in *.py; do echo "Rendering $i" && python3 $i || exit 1; done
      working-directory: code/doc/gallery
      env:
        PYTHONPATH: ${{ github.workspace }}/install

  build_test_windows:
    name: Build and test on Windows
    runs-on: windows-2019
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        path: code
        submodules: true
    - name: Cache conda environment
      id: cache-conda
      uses: actions/cache@v2.1.6
      with:
        path: env
        key: ${{ runner.os }}-${{ hashFiles('code\\.github\\workflows\\environments\\conda.yml') }}
    - name: Create conda environment
      if: steps.cache-conda.outputs.cache-hit != 'true'
      run: $CONDA\\Scripts\\conda env create -f code\\.github\\workflows\\environments\\conda.yml --prefix env -qpre
    - name: Add environment to system path
      run: |
        echo $GITHUB_WORKSPACE\\env >> $GITHUB_PATH
        echo $GITHUB_WORKSPACE\\env\\Scripts >> $GITHUB_PATH
        echo $GITHUB_WORKSPACE\\env\\Library\\bin >> $GITHUB_PATH
    - name: Configure
      run: |
        cmake -S code -B build -DENABLE_EMBREE=ON \
                      -DENABLE_OPTIX=OFF \
                      -DPYTHON_EXECUTABLE=$GITHUB_WORKSPACE\\env\\python.exe \
                      -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE\\install
      env:
        CMAKE_PREFIX_PATH: ${{ github.workspace }}\env
    - name: Build
      run: cmake --build build --config Release -j
    - name: Install
      run: cmake --install build --config Release
    - name: Run tests
      run: python -m pytest --pyargs fresnel -v --log-level=DEBUG --durations=0 --durations-min=0.1
      env:
        PYTHONPATH: ${{ github.workspace }}\install

  # This job is used to provide a single requirement for branch merge conditions.
  tests_complete:
    name: Unit test
    needs: [build_test_windows, test, render_gallery]
    runs-on: ubuntu-latest

    steps:
      - run: echo "Done!"
<% endblock %>
