name: Unit test

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  # Trigger on pull requests.
  pull_request:

  # Trigger on pushes to the mainline branches. This prevents building commits twice when the pull
  # request source branch is in the same repository.
  push:
    branches:
    - "master"

  # Trigger on request.
  workflow_dispatch:

jobs:
  clang13_py310:
    uses: ./.github/workflows/build_test.yml
    with:
      image: clang13_py310
      render_gallery: true
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  clang12_py310:
    uses: ./.github/workflows/build_test.yml
    with:
      image: clang12_py310
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  gcc11_py310:
    uses: ./.github/workflows/build_test.yml
    with:
      image: gcc11_py310
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  clang11_py39:
    uses: ./.github/workflows/build_test.yml
    with:
      image: clang11_py39
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  gcc10_py39:
    uses: ./.github/workflows/build_test.yml
    with:
      image: gcc10_py39
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  gcc9_py38:
    uses: ./.github/workflows/build_test.yml
    with:
      image: gcc9_py38
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  gcc8_py37:
    uses: ./.github/workflows/build_test.yml
    with:
      image: gcc8_py37
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  clang6_py37:
    uses: ./.github/workflows/build_test.yml
    with:
      image: clang6_py37
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  gcc7_py36:
    uses: ./.github/workflows/build_test.yml
    with:
      image: gcc7_py36
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  optix60_cuda11_py38:
    uses: ./.github/workflows/build_test.yml
    with:
      image: optix60_cuda11_py38
      repository: joaander
      test_runner: self-hosted
      test_docker_options: --mount type=bind,source=/usr/lib/libnvidia-rtcore.so,target=/usr/lib/libnvidia-rtcore.so --mount type=bind,source=/usr/lib/libnvoptix.so,target=/usr/lib/libnvoptix.so --device /dev/nvidia0 --device /dev/nvidia1 --device /dev/nvidia-uvm --device /dev/nvidia-uvm-tools --device /dev/nvidiactl --gpus=all
      render_gallery: true
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  optix60_cuda10_py37:
    uses: ./.github/workflows/build_test.yml
    with:
      image: optix60_cuda10_py37
      repository: joaander
      test_runner: self-hosted
      test_docker_options: --mount type=bind,source=/usr/lib/libnvidia-rtcore.so,target=/usr/lib/libnvidia-rtcore.so --mount type=bind,source=/usr/lib/libnvoptix.so,target=/usr/lib/libnvoptix.so --device /dev/nvidia0 --device /dev/nvidia1 --device /dev/nvidia-uvm --device /dev/nvidia-uvm-tools --device /dev/nvidiactl --gpus=all
    secrets:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  build_test_windows:
    name: Build and test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - {os: windows-2019, cmake_generator: "Visual Studio 16 2019"}
        - {os: windows-2022, cmake_generator: "Visual Studio 17 2022"}
    steps:
    - uses: actions/checkout@v2.4.0
      with:
        path: code
        submodules: true
    - name: Cache conda packages
      uses: actions/cache@v2.1.6
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ matrix.os }}-${{ hashFiles('code/.github/workflows/environments/conda.yml') }}
    - name: Create conda environment
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        environment-file: code/.github/workflows/environments/conda.yml
        activate-environment: ${{ github.workspace }}/env
        python-version: 3.9
        miniforge-variant: Mambaforge
        miniforge-version: "latest"
        use-only-tar-bz2: true
        use-mamba: true
      env:
        CONDA: ${{ github.workspace }}\miniconda
    - name: Add environment to system path
      # these are all needed because miniconda installs libraries to a variety of paths
      run: |
        echo "$env:GITHUB_WORKSPACE\env" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "$env:GITHUB_WORKSPACE\env\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "$env:GITHUB_WORKSPACE\env\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "$env:GITHUB_WORKSPACE\env\Library\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Configure
      run: >
        cmake -S code -B build
        -DENABLE_EMBREE=ON
        -DENABLE_OPTIX=OFF
        -DPYTHON_EXECUTABLE="$env:GITHUB_WORKSPACE"\env\python.exe
        -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE"\install
        -G "${{ matrix.cmake_generator }}"
      env:
        CMAKE_PREFIX_PATH: ${{ github.workspace }}\env
    - name: Build
      run: cmake --build build --config Release -j
    - name: Install
      run: cmake --install build --config Release
    - name: Run tests
      run: python -m pytest --pyargs fresnel -v --log-level=DEBUG --durations=0 --durations-min=0.1
      env:
        PYTHONPATH: ${{ github.workspace }}\install

  # This job is used to provide a single requirement for branch merge conditions.
  tests_complete:
    name: Unit test
    needs: [clang13_py310,
            clang12_py310,
            gcc11_py310,
            clang11_py39,
            gcc10_py39,
            gcc9_py38,
            gcc8_py37,
            clang6_py37,
            gcc7_py36,
            optix60_cuda11_py38,
            optix60_cuda10_py37,
            build_test_windows]
    runs-on: ubuntu-latest

    steps:
      - run: echo "Done!"
