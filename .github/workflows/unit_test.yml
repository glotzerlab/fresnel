name: Unit test

concurrency:
  group: unit-test-${{ github.ref }}
  cancel-in-progress: true

on:
  # Trigger on pull requests.
  pull_request:

  # Trigger on pushes to the mainline branches and version tags. This prevents building commits
  # twice when the pull request source branch is in the same repository.
  push:
    branches:
      - "master"

  # Trigger on request.
  workflow_dispatch:

# Use multiple jobs to reduce the amount of time spent on GPU runners. Use GitHub Hosted runners
# for compiling all tests configurations (GPU and CPU), then upload the installation directory
# as an artifact. Test jobs depend on the build job, download the install directory, and run the
# tests. Upload each build configuration to a separate artifact.

# Github Actions does not support any form of templating at this time, not even YAML anchors.
# To minimize the number of duplicated lines, encode the job configuration as an array in config:
# [image, (embree)]
jobs:
  build:
    name: Build [${{ join(matrix.config, '_') }}]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.repository }}/ci:2021.04-${{ matrix.config[0] }}
      options: -u 0
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    strategy:
      matrix:
        include:
          - {repository: glotzerlab, config: [clang11_py39, embree]}
          - {repository: glotzerlab, config: [gcc10_py39, embree]}
          - {repository: glotzerlab, config: [gcc9_py38, embree]}
          - {repository: glotzerlab, config: [gcc8_py37, embree]}
          - {repository: glotzerlab, config: [clang6_py37, embree]}
          - {repository: glotzerlab, config: [gcc7_py36, embree]}
          - {repository: joaander, config: [optix60_cuda11_py38]}
          - {repository: joaander, config: [optix60_cuda10_py37]}
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          path: code
          submodules: true
      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake ../code -GNinja \
                        -DENABLE_EMBREE=${ENABLE_EMBREE:-"ON"} \
                        -DENABLE_OPTIX=${ENABLE_OPTIX:-"OFF"} \
                        -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install
        env:
          ENABLE_OPTIX: ${{ contains(matrix.config[0], 'optix') }}
          ENABLE_EMBREE: ${{ contains(matrix.config, 'embree') }}
      - name: Build
        run: ninja install
        working-directory: build
      # Tar the installation directory to preserve permissions and reduce HTTP requests on upload.
      - name: 'Tar install'
        run: tar -cvf install.tar install
      # Upload the tarball. Retain the file for a limited time in case developers need to download
      # and run tests locally for further debugging.
      - name: 'Upload install'
        uses: actions/upload-artifact@v2.2.3
        with:
          name: install-${{ join(matrix.config, '_') }}
          path: install.tar
          retention-days: 7

  test:
    name: Test [${{ join(matrix.config, '_') }}]
    needs: build
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.repository }}/ci:2021.04-${{ matrix.config[0] }}
      options: -u 0 ${{ matrix.docker_options }}
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    strategy:
      matrix:
        include:
          - {repository: glotzerlab, config: [clang11_py39, embree]}
          - {repository: glotzerlab, config: [gcc10_py39, embree]}
          - {repository: glotzerlab, config: [gcc9_py38, embree]}
          - {repository: glotzerlab, config: [gcc8_py37, embree]}
          - {repository: glotzerlab, config: [clang6_py37, embree]}
          - {repository: glotzerlab, config: [gcc7_py36, embree]}
          # bind mount needed to load OpTiX driver: https://github.com/NVIDIA/nvidia-docker/issues/990
          # - {repository: joaander, config: [optix60_cuda11_py38, optix], docker_options: -mount type=bind,source=/usr/lib/libnvidia-rtcore.so,target=/usr/lib/libnvidia-rtcore.so --mount type=bind,source=/usr/lib/libnvoptix.so,target=/usr/lib/libnvoptix.so --gpus=all -e CUDA_VISIBLE_DEVICES}
    steps:
      - uses: actions/download-artifact@v2.0.9
        with:
          name: install-${{ join(matrix.config, '_') }}
      - name: Untar install
        run: tar -xvf install.tar
      - name: Run tests
        run: python3 -m pytest --pyargs fresnel -v --log-level=DEBUG --durations=0
        env:
          PYTHONPATH: ${{ github.workspace }}/install

  render_gallery:
    name: Render gallery [${{ join(matrix.config, '_') }}]
    needs: build
    runs-on: ubuntu-latest
    container:
      image: glotzerlab/ci:2021.04-${{ matrix.config[0] }}
      options: -u 0
    strategy:
      matrix:
        include:
          - {repository: glotzerlab, config: [clang11_py39, embree]}
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
          path: code
      - uses: actions/download-artifact@v2.0.9
        with:
          name: install-${{ join(matrix.config, '_') }}
      - name: Untar install
        run: tar -xvf install.tar
      - name: Render gallery images
        run: for i in *.py; do echo "Rendering $i" && python3 $i || exit 1; done
        working-directory: code/doc/gallery
        env:
          PYTHONPATH: ${{ github.workspace }}/install

  # This job is used to provide a single requirement for branch merge conditions.
  tests_complete:
    name: Unit test
    needs: [test, render_gallery]
    runs-on: ubuntu-latest

    steps:
      - run: echo "Done!"
