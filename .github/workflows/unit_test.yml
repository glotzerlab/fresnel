name: Unit test

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  # Trigger on pull requests.
  pull_request:

  # Trigger on pushes to the mainline branches and version tags. This prevents building commits
  # twice when the pull request source branch is in the same repository.
  push:
    branches:
      - "master"

  # Trigger on request.
  workflow_dispatch:

# Use multiple jobs to reduce the amount of time spent on GPU runners. Use GitHub Hosted runners
# for compiling all tests configurations (GPU and CPU), then upload the installation directory
# as an artifact. Test jobs depend on the build job, download the install directory, and run the
# tests. Upload each build configuration to a separate artifact.
jobs:
  build:
    name: Build [${{ matrix.image }}]
    runs-on: ubuntu-latest
    container:
      image: glotzerlab/ci:2021.04-${{ matrix.image }}
      options: -u 0
    strategy:
      matrix:
        include:
          - image: clang11_py39
          - image: gcc10_py39


                # gcc9_py38,
                # clang10_py38,
                # clang9_py38,
                # clang8_py38,
                # clang7_py38,
                # gcc8_py37,
                # gcc7_py37,
                # clang6_py37,
                # gcc7_py36,

    steps:
      - uses: actions/checkout@v2.3.4
        with:
          path: code
          submodules: true
      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake ../code -GNinja \
                        -DENABLE_EMBREE=${ENABLE_EMBREE:-"ON"} \
                        -DENABLE_OPTIX=${ENABLE_OPTIX:-"OFF"} \
                        -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install
        env:
          ENABLE_OPTIX: ${{ matrix.enable_optix }}
          ENABLE_EMBREE: ${{ matrix.enable_embree }}
      - name: Build
        run: ninja install
        working-directory: build
      # Tar the installation directory to preserve permissions and reduce HTTP requests on upload.
      - name: 'Tar install'
        run: tar -cvf install.tar install
      # Upload the tarball. Retain the file for a limited time in case developers need to download
      # and run tests locally for further debugging.
      - name: 'Upload install'
        uses: actions/upload-artifact@v2.2.3
        with:
          name: install-${{ matrix.image }}
          path: install.tar
          retention-days: 7

  test:
    name: Test [${{ matrix.image }}]
    needs: build
    runs-on: ubuntu-latest
    container:
      image: glotzerlab/ci:2021.04-${{ matrix.image }}
      options: -u 0
    strategy:
      matrix:
        include:
          - image: clang11_py39
          - image: gcc10_py39
    steps:
      - uses: actions/download-artifact@v2.0.9
        with:
          name: install-${{ matrix.image }}
      - name: Untar install
        run: tar -xvf install.tar
      - name: Run tests
        run: python3 -m pytest --pyargs fresnel -v --log-level=DEBUG --durations=0
        env:
          PYTHONPATH: ${{ github.workspace }}/install

  render_gallery:
    name: Render gallery [${{ matrix.image }}]
    needs: build
    runs-on: ubuntu-latest
    container:
      image: glotzerlab/ci:2021.04-${{ matrix.image }}
      options: -u 0
    strategy:
      matrix:
        image: [clang11_py39]
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: true
          path: code
      - uses: actions/download-artifact@v2.0.9
        with:
          name: install-${{ matrix.image }}
      - name: Untar install
        run: tar -xvf install.tar
      - name: Render gallery images
        run: for i in *.py; do echo "Rendering $i" && python3 $i || exit 1; done
        working-directory: code/doc/gallery
        env:
          PYTHONPATH: ${{ github.workspace }}/install

  # unit_test_other:
  #   name: Unit test on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-10.15, windows-2019]

  #   steps:
  #     - uses: actions/checkout@v2.3.4
  #       with:
  #         path: code
  #     - name: Install prereqs
  #       run: python3 -m pip install -r code/.github/requirements-test.txt
  #     - name: Configure
  #       run: cmake -S code -B build
  #     - name: Build
  #       run: cmake --build build -j 4 --config Release
  #     - if: runner.os == 'Windows'
  #       name: Copy pyd files
  #       run: cp ./gsd/Release/*.pyd gsd/
  #       working-directory: build
  #     - name: Run tests
  #       run: python3 -m pytest --pyargs gsd ${pytest_options} -v --log-level=DEBUG
  #       env:
  #         PYTHONPATH: ${{ github.workspace }}/build

  # # This job is used to provide a single requirement for branch merge conditions.
  # tests_complete:
  #   name: Unit test
  #   if: always()
  #   needs: [unit_test_linux, unit_test_other]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - run: echo "Done!"
